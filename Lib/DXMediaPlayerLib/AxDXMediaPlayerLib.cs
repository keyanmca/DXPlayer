//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.18444
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("07/08/2015 13:28:00")]

namespace AxDXMediaPlayerLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{f845e8c7-e75d-4286-be0d-95efa688dfa7}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnDXMediaPlayerEvent")]
    public class AxDXMediaPlayer : System.Windows.Forms.AxHost {
        
        private DXMediaPlayerLib._DDXMediaPlayer ocx;
        
        private AxDXMediaPlayerEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxDXMediaPlayer() : 
                base("f845e8c7-e75d-4286-be0d-95efa688dfa7") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual uint AudioVolume {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AudioVolume", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AudioVolume;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AudioVolume", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AudioVolume = value;
            }
        }
        
        public event _DDXMediaPlayerEvents_OnDXMediaPlayerEventEventHandler OnDXMediaPlayerEvent;
        
        public event _DDXMediaPlayerEvents_OnMouseEventEventHandler OnMouseEvent;
        
        public event _DDXMediaPlayerEvents_OnAsyncResultEventEventHandler OnAsyncResultEvent;
        
        public virtual int Test(int test) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Test", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Test(test)));
            return returnValue;
        }
        
        public virtual int Connect(string url, int streamType, int timeout) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Connect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Connect(url, streamType, timeout)));
            return returnValue;
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void SetAspectRatio(int ratio) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAspectRatio", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetAspectRatio(ratio);
        }
        
        public virtual void UpdateConfiguration() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UpdateConfiguration", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UpdateConfiguration();
        }
        
        public virtual void SetLogOutputType(int type) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLogOutputType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetLogOutputType(type);
        }
        
        public virtual int RecordStart(string filepaths, uint fileSplitType, uint fileSplitDuration, int filepathFormat) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RecordStart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.RecordStart(filepaths, fileSplitType, fileSplitDuration, filepathFormat)));
            return returnValue;
        }
        
        public virtual void RecordStop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RecordStop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RecordStop();
        }
        
        public virtual int Play(double starttime) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Play", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Play(starttime)));
            return returnValue;
        }
        
        public virtual int OpenFile(string filepath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OpenFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.OpenFile(filepath)));
            return returnValue;
        }
        
        public virtual void Pause() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Pause", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Pause();
        }
        
        public virtual string GetStringInfo(string info_type) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetStringInfo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetStringInfo(info_type)));
            return returnValue;
        }
        
        public virtual ulong GetPlayTime() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPlayTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            ulong returnValue = ((ulong)(this.ocx.GetPlayTime()));
            return returnValue;
        }
        
        public virtual int Seek(uint seektime, int flag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Seek", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Seek(seektime, flag)));
            return returnValue;
        }
        
        public virtual void SetPlaySpeed(float speed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPlaySpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetPlaySpeed(speed);
        }
        
        public virtual int PlayDirection(int playDir) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlayDirection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.PlayDirection(playDir)));
            return returnValue;
        }
        
        public virtual int PlayNextFrame() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlayNextFrame", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.PlayNextFrame()));
            return returnValue;
        }
        
        public virtual void PlayContinue() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlayContinue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PlayContinue();
        }
        
        public virtual int ConnectRecord(string url, int streamType, int timeout, string filepaths, uint fileSplitType, uint fileSplitDuration, int filepathFormat, int bufferingTime, bool record) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConnectRecord", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ConnectRecord(url, streamType, timeout, filepaths, fileSplitType, fileSplitDuration, filepathFormat, bufferingTime, record)));
            return returnValue;
        }
        
        public virtual int ConnectPlayAsync(string url, int streamType, int timeout, double starttime) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConnectPlayAsync", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ConnectPlayAsync(url, streamType, timeout, starttime)));
            return returnValue;
        }
        
        public virtual int ConnectRecordAsync(string url, int streamType, int timeout, string filepaths, uint fileSplitType, uint fileSplitDuration, int filepathFormat, int bufferingTime, bool record) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConnectRecordAsync", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ConnectRecordAsync(url, streamType, timeout, filepaths, fileSplitType, fileSplitDuration, filepathFormat, bufferingTime, record)));
            return returnValue;
        }
        
        public virtual int GetState() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetState()));
            return returnValue;
        }
        
        public virtual void SetTimer(int timerMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetTimer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetTimer(timerMode);
        }
        
        public virtual void SetTimerStartTime(ulong starttime) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetTimerStartTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetTimerStartTime(starttime);
        }
        
        public virtual void ControlTimer(int cmd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ControlTimer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ControlTimer(cmd);
        }
        
        public virtual string SnapshotBase64() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapshotBase64", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SnapshotBase64()));
            return returnValue;
        }
        
        public virtual int SetCommandString(string cmd_type, string cmd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCommandString", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetCommandString(cmd_type, cmd)));
            return returnValue;
        }
        
        public virtual int DrawTextString(int draw_index, int text_id, string @string, int x, int y, string fontname, int fontsize, int underline, int fontcolor, int bordercolor, int bgcolor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawTextString", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DrawTextString(draw_index, text_id, @string, x, y, fontname, fontsize, underline, fontcolor, bordercolor, bgcolor)));
            return returnValue;
        }
        
        public virtual int DrawTextRectangle(int draw_index, int text_id, int x, int y, int width, int height, int borderstyle, int borderwidth, int bordercolor, int fillcolor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawTextRectangle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DrawTextRectangle(draw_index, text_id, x, y, width, height, borderstyle, borderwidth, bordercolor, fillcolor)));
            return returnValue;
        }
        
        public virtual int ClearTextRect(int draw_index, int x, int y, int width, int height) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearTextRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClearTextRect(draw_index, x, y, width, height)));
            return returnValue;
        }
        
        public virtual int ClearTextId(int draw_index, int text_id) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearTextId", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClearTextId(draw_index, text_id)));
            return returnValue;
        }
        
        public virtual int ClearTextAll(int draw_index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearTextAll", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClearTextAll(draw_index)));
            return returnValue;
        }
        
        public virtual int DrawTextBitmapBase64(int draw_index, int text_id, int x, int y, string base64, int size) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawTextBitmapBase64", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.DrawTextBitmapBase64(draw_index, text_id, x, y, base64, size)));
            return returnValue;
        }
        
        public virtual void UpdateText(int draw_index, bool update) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UpdateText", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UpdateText(draw_index, update);
        }
        
        public virtual int OpenLiveServerSession(string serverSession, string url, int streamType, int timeout) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OpenLiveServerSession", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.OpenLiveServerSession(serverSession, url, streamType, timeout)));
            return returnValue;
        }
        
        public virtual int StartServer(ushort port) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartServer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StartServer(port)));
            return returnValue;
        }
        
        public virtual void StopServer() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StopServer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.StopServer();
        }
        
        public virtual int OpenPlayLiveServerSessionAsync(string serverSession, string url, int streamType, int timeout) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OpenPlayLiveServerSessionAsync", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.OpenPlayLiveServerSessionAsync(serverSession, url, streamType, timeout)));
            return returnValue;
        }
        
        public virtual int StartSendAudio(int codec, string ip, ushort port, int protocol, int timeout) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartSendAudio", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.StartSendAudio(codec, ip, port, protocol, timeout)));
            return returnValue;
        }
        
        public virtual void StopSendAudio() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StopSendAudio", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.StopSendAudio();
        }
        
        public virtual int OpenVodServerSession(string serverSession, string filepath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OpenVodServerSession", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.OpenVodServerSession(serverSession, filepath)));
            return returnValue;
        }
        
        public virtual int SetPlaySpeedAsync(float speed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPlaySpeedAsync", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetPlaySpeedAsync(speed)));
            return returnValue;
        }
        
        public virtual int PlayDirectionAsync(int playDir) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PlayDirectionAsync", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.PlayDirectionAsync(playDir)));
            return returnValue;
        }
        
        public virtual int SetZoomEnable(bool enable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetZoomEnable", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetZoomEnable(enable)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxDXMediaPlayerEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(DXMediaPlayerLib._DDXMediaPlayerEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((DXMediaPlayerLib._DDXMediaPlayer)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnDXMediaPlayerEvent(object sender, _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent e) {
            if ((this.OnDXMediaPlayerEvent != null)) {
                this.OnDXMediaPlayerEvent(sender, e);
            }
        }
        
        internal void RaiseOnOnMouseEvent(object sender, _DDXMediaPlayerEvents_OnMouseEventEvent e) {
            if ((this.OnMouseEvent != null)) {
                this.OnMouseEvent(sender, e);
            }
        }
        
        internal void RaiseOnOnAsyncResultEvent(object sender, _DDXMediaPlayerEvents_OnAsyncResultEventEvent e) {
            if ((this.OnAsyncResultEvent != null)) {
                this.OnAsyncResultEvent(sender, e);
            }
        }
    }
    
    public delegate void _DDXMediaPlayerEvents_OnDXMediaPlayerEventEventHandler(object sender, _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent e);
    
    public class _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent {
        
        public int event_type;
        
        public string strEvent;
        
        public _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent(int event_type, string strEvent) {
            this.event_type = event_type;
            this.strEvent = strEvent;
        }
    }
    
    public delegate void _DDXMediaPlayerEvents_OnMouseEventEventHandler(object sender, _DDXMediaPlayerEvents_OnMouseEventEvent e);
    
    public class _DDXMediaPlayerEvents_OnMouseEventEvent {
        
        public int event_type;
        
        public int flags;
        
        public int x;
        
        public int y;
        
        public int picturex;
        
        public int picturey;
        
        public _DDXMediaPlayerEvents_OnMouseEventEvent(int event_type, int flags, int x, int y, int picturex, int picturey) {
            this.event_type = event_type;
            this.flags = flags;
            this.x = x;
            this.y = y;
            this.picturex = picturex;
            this.picturey = picturey;
        }
    }
    
    public delegate void _DDXMediaPlayerEvents_OnAsyncResultEventEventHandler(object sender, _DDXMediaPlayerEvents_OnAsyncResultEventEvent e);
    
    public class _DDXMediaPlayerEvents_OnAsyncResultEventEvent {
        
        public int cmdtype;
        
        public int result;
        
        public _DDXMediaPlayerEvents_OnAsyncResultEventEvent(int cmdtype, int result) {
            this.cmdtype = cmdtype;
            this.result = result;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxDXMediaPlayerEventMulticaster : DXMediaPlayerLib._DDXMediaPlayerEvents {
        
        private AxDXMediaPlayer parent;
        
        public AxDXMediaPlayerEventMulticaster(AxDXMediaPlayer parent) {
            this.parent = parent;
        }
        
        public virtual void OnDXMediaPlayerEvent(int event_type, string strEvent) {
            _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent ondxmediaplayereventEvent = new _DDXMediaPlayerEvents_OnDXMediaPlayerEventEvent(event_type, strEvent);
            this.parent.RaiseOnOnDXMediaPlayerEvent(this.parent, ondxmediaplayereventEvent);
        }
        
        public virtual void OnMouseEvent(int event_type, int flags, int x, int y, int picturex, int picturey) {
            _DDXMediaPlayerEvents_OnMouseEventEvent onmouseeventEvent = new _DDXMediaPlayerEvents_OnMouseEventEvent(event_type, flags, x, y, picturex, picturey);
            this.parent.RaiseOnOnMouseEvent(this.parent, onmouseeventEvent);
        }
        
        public virtual void OnAsyncResultEvent(int cmdtype, int result) {
            _DDXMediaPlayerEvents_OnAsyncResultEventEvent onasyncresulteventEvent = new _DDXMediaPlayerEvents_OnAsyncResultEventEvent(cmdtype, result);
            this.parent.RaiseOnOnAsyncResultEvent(this.parent, onasyncresulteventEvent);
        }
    }
}
